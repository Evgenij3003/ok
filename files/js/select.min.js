class Select{constructor(props,options){this.selectClasses={classSelect:"select",classSelectCustom:"select__elem",classSelectTitle:"select__title",classSelectValues:"select__values",classSelectValue:"select__value",classSelectTag:"select__tag",classSelectCloseButton:"select__close-button",classSelectQuantity:"select__quantity",classSelectText:"select__text",classSelectInput:"select__input",classSelectLabel:"select__label",classSelectBody:"select__body",classSelectOptions:"select__options",classSelectOption:"select__option",classSelectOptionCheckbox:"select__checkbox",classSelectLink:"select__link",classSelectRow:"select__row",classSelectData:"select__asset",classSelectDisabled:"select-disabled",classSelectOpen:"select-open",classSelectActive:"select-active",classSelectFocus:"select-focus",classSelectOptionSelected:"selected",}
this.startOptions={logging:!0,disabled:!1,startOpen:!1,closeAllSelect:!0,speed:300,scroll:"",multiple:!1,tagCloseButton:!1,deleteTagOnClick:!1,separatorTags:"",selectLabel:!1,selectLabelText:"",hideSelectLabel:!1,quantity:!1,quantityOutput:"title",search:!1,validate:!0,submit:!1,}
options?this.selectOptions={...this.startOptions,...options}:this.selectOptions=this.startOptions;if(props instanceof NodeList){props.forEach(select=>{this.selectInit(select)})}else{this.selectInit(props)}}
selectInit(hiddenSelect){const selectBlock=hiddenSelect.parentElement;selectBlock.classList.add(this.selectClasses.classSelect);selectBlock.appendChild(hiddenSelect);hiddenSelect.hidden=!0;if(this.selectOptions.multiple){hiddenSelect.setAttribute("multiple","")}
this.selectBuild(hiddenSelect,selectBlock)}
selectBuild(hiddenSelect,selectBlock){selectBlock.insertAdjacentHTML("beforeend",`
            <div class="${this.selectClasses.classSelectCustom}"></div>
        `);const select=selectBlock.querySelector(`.${this.selectClasses.classSelectCustom}`);this.getSelectTitleValue(hiddenSelect,select);this.selectOptions.hideSelectLabel?select.querySelector(`.${this.selectClasses.classSelectValue}`).style.display="none":null;this.getOptions(hiddenSelect,select);this.selectOptions.disabled?this.selectDisabled(hiddenSelect,select):null;this.selectOptions.startOpen?this.selectAction(hiddenSelect,select):null;(hiddenSelect.hasAttribute("data-quantity")&&this.selectOptions.quantity)?this.selectContentOutput(hiddenSelect,select):null;hiddenSelect.hasAttribute("data-tags")?this.selectContentOutput(hiddenSelect,select):null;this.selectEvents(hiddenSelect,select)}
getSelectTitleValue(hiddenSelect,select,quantity=1){const selectTitleBlock=select.querySelector(`.${this.selectClasses.classSelectTitle}`);if(selectTitleBlock){selectTitleBlock.remove()}
let selectTitle=this.getSelectedOptionsData(hiddenSelect);let selectValues;if(this.selectOptions.multiple){if(this.selectOptions.tagCloseButton){const iconCloseHTML=`
                    <span class="${this.selectClasses.classSelectCloseButton}">
                        <svg xmlns="http://www.w3.org/2000/svg" height="17" viewBox="0 0 17 17" width="17">
                            <path class="tag-close-icon" d="M8.5 0a8.5 8.5 0 110 17 8.5 8.5 0 010-17zm3.364 5.005a.7.7 0 00-.99 0l-2.44 2.44-2.439-2.44-.087-.074a.7.7 0 00-.903 1.064l2.44 2.439-2.44 2.44-.074.087a.7.7 0 001.064.903l2.439-2.441 2.44 2.441.087.074a.7.7 0 00.903-1.064l-2.441-2.44 2.441-2.439.074-.087a.7.7 0 00-.074-.903z" fill="currentColor" fill-rule="evenodd"></path>
                        </svg>
                    </span>
                `;selectValues=selectTitle.filter(option=>option.value!="all").filter(option=>option.selected).map(option=>`
                    <span role="button" data-value="${option.value}" class="${this.selectClasses.classSelectValue} ${this.selectClasses.classSelectTag}">
                        ${iconCloseHTML}${option.textContent.trim()}
                    </span>
                `).join(`${this.selectOptions.separatorTags}`)}else{selectValues=selectTitle.filter(option=>option.value!="all").filter(option=>option.selected).map(option=>`
                    <span role="button" data-value="${option.value}" class="${this.selectClasses.classSelectValue} ${this.selectClasses.classSelectTag}">
                        ${option.textContent.trim()}
                    </span>
                `).join(`${this.selectOptions.separatorTags}`)}}
selectTitle.textContent?select.parentElement.classList.add(this.selectClasses.classSelectActive):select.parentElement.classList.remove(this.selectClasses.classSelectActive);if(this.selectOptions.search){select.insertAdjacentHTML("afterbegin",`
                <div class="${this.selectClasses.classSelectTitle}">
                    <div class="${this.selectClasses.classSelectValue}">
                        <input autocomplete="off" type="text" placeholder="${selectTitle.textContent}" data-placeholder="${selectTitle.textContent}" 
                            class="${this.selectClasses.classSelectInput}">
                    </div>
                </div>
            `)}else{let titleValue;if(this.selectOptions.multiple){titleValue=`<div class="${this.selectClasses.classSelectValues}">${selectValues}</div>`}else if(selectTitle.dataset.asset){titleValue=`
                    <span class="${this.selectClasses.classSelectRow}">
                            <span class="${this.selectClasses.classSelectData}">
                                <img src="${selectTitle.dataset.asset}" alt="${selectTitle.dataset.value}"> 
                            </span>
                            <span class="${this.selectClasses.classSelectText}">${selectTitle.textContent}</span>
                    </span>
                `}else{titleValue=`<div class="${this.selectClasses.classSelectValue}">${selectTitle.textContent.trim()}</div>`}
const selectLabelText=this.selectOptions.selectLabel?this.selectOptions.selectLabelText:"";const selectLabelClass=this.selectOptions.selectLabel?`${this.selectClasses.classSelectLabel}`:"";const selectQuantity=this.selectOptions.quantity&&this.selectOptions.quantityOutput==="title"?`<span class="${this.selectClasses.classSelectQuantity}">(${quantity}) :</span>`:"";const selectLabel=this.selectOptions.selectLabel?`<div class="${selectLabelClass}">${selectLabelText} ${selectQuantity}</div>`:"";select.insertAdjacentHTML("afterbegin",`
                <button type="button" class="${this.selectClasses.classSelectTitle}">${selectLabel}${titleValue}</button>
            `)}}
getSelectedOptionsData(hiddenSelect){if(this.selectOptions.multiple){let selectedOptions=Array.from(hiddenSelect.options);return selectedOptions}else{let selectedOption=hiddenSelect.options[hiddenSelect.selectedIndex];return selectedOption}}
getOptions(hiddenSelect,select,quantity=1){let selectOptions=Array.from(hiddenSelect.options);if(selectOptions.length>0){let selectOptionsContent=``;let quantityHTML=``;selectOptions.forEach(option=>{selectOptionsContent+=this.getOption(hiddenSelect,option)});if(this.selectOptions.quantityOutput==="body"){const pseudoAttribute=this.selectOptions.selectLabelText?this.selectOptions.selectLabelText:"Выбрано";const pseudoAttributeClass=`${this.selectClasses.classSelectLabel}`;quantityHTML=`
                    <div class="${pseudoAttributeClass}">
                        ${pseudoAttribute}
                        <span class="${this.selectClasses.classSelectQuantity}">(${quantity}) :</span>
                    </div>
                `}
let selectBody=`
                <div class="${this.selectClasses.classSelectBody}" hidden>
                    ${quantityHTML}
                    <div class="${this.selectClasses.classSelectOptions}">
                        ${selectOptionsContent}
                    </div>
                </div>
            `;select.insertAdjacentHTML("beforeend",selectBody);if(this.selectOptions.scroll){const scrollValue=this.selectOptions.scroll;select.querySelector(`.${this.selectClasses.classSelectOptions}`).style.maxHeight=parseInt(scrollValue.match(/\d+/))+scrollValue.match(/\D+/)[0];select.querySelector(`.${this.selectClasses.classSelectOptions}`).style.overflowY="auto"}}}
getOption(hiddenSelect,option){const optionSelected=option.selected?` ${this.selectClasses.classSelectOptionSelected}`:"";const optionHide=option.selected&&!this.selectOptions.multiple?`hidden`:"";const optionClass=option.dataset.class?` ${option.dataset.class}`:"";const optionCheckbox=option.hasAttribute("data-checkbox")?!0:"";const optionAsset=option.hasAttribute("data-asset")?option.dataset.asset:"";const optionSelectedCheckbox=option.selected?` _active`:"";const optionLink=option.dataset.href?option.dataset.href:!1;const optionLinkTarget=option.hasAttribute("data-href-blank")?`target="_blank"`:"";let optionHTML=``;if(optionLink){optionHTML=`
                <a href="${optionLink}" ${optionLinkTarget} data-value="${option.value}" 
                    class="${this.selectClasses.classSelectOption} ${this.selectClasses.classSelectLink}${optionClass}${optionSelected}" ${optionHide}>${option.textContent.trim()}</a>
            `}else if(optionCheckbox){optionHTML=`
                <button type="button" data-checkbox data-value="${option.value}" class="${this.selectClasses.classSelectOption}${optionClass}${optionSelected}" ${optionHide}>
                    <div class="${this.selectClasses.classSelectOptionCheckbox} checkbox${optionSelectedCheckbox}">
                        <input id="${option.value}" type="checkbox" name="${option.value}" class="checkbox__input">
                        <label for="${option.value}" class="checkbox__text">
                            <span>${option.textContent.trim()}</span>
                        </label>
                    </div>
                </button>
            `}else if(optionAsset){optionHTML=`
                <button type="button" data-asset data-value="${option.value}" class="${this.selectClasses.classSelectOption}${optionClass}${optionSelected}" ${optionHide}>
                    <div class="${this.selectClasses.classSelectRow}">
                        <span class="${this.selectClasses.classSelectData}">
                            <img src="${optionAsset}" alt="${option.value}"> 
                        </span>
                        <span class="${this.selectClasses.classSelectText}">${option.textContent.trim()}</span>
                    </div>
                </button>
            `}else{optionHTML=`
                <button type="button" data-value="${option.value}" class="${this.selectClasses.classSelectOption}${optionClass}${optionSelected}" ${optionHide}>${option.textContent.trim()}</button>
            `}
if(option.parentElement.tagName==="OPTGROUP"&&(option===option.parentElement.children[0])){const optionLabelHTML=`
                <label data-label="${option.parentElement.label}" class="${this.selectClasses.classSelectLabel}">${option.parentElement.label.trim()}:</label>
            `;optionHTML=optionLabelHTML+optionHTML}
return optionHTML}
selectContentOutput(hiddenSelect,select){if(hiddenSelect.hasAttribute("data-tags")){const outputTagsBlock=hiddenSelect.getAttribute("data-tags");let selectedItems=Array.from(hiddenSelect.querySelectorAll("[selected]"));let outputContent=selectedItems.filter(option=>option.value!="all").map(option=>`
                <div class="output-tags__item output-tags">
                    <div class="output-tags__country">${option.dataset.country}</div>
                    <div class="output-tags__city">${option.innerHTML}</div>
                </div>
            `).join("");document.querySelector(`${outputTagsBlock}`).innerHTML=`${outputContent}`};if(hiddenSelect.hasAttribute("data-quantity")){const outputQuantityBlock=hiddenSelect.getAttribute("data-quantity");document.querySelector(`${outputQuantityBlock}`).innerHTML=`${select.querySelectorAll(`.${this.selectClasses.classSelectOptionSelected}:not([data-value='all'])`).length 
                ? `(${select.querySelectorAll(`.${this.selectClasses.classSelectOptionSelected}:not([data-value='all'])`).length})`
                : "(0)"}`}}
selectEvents(hiddenSelect,select){document.addEventListener("click",function(e){(!e.target.closest(`.${this.selectClasses.classSelect}`)&&this.selectOptions.closeAllSelect)?this.selectAction(hiddenSelect,select,!1):null}.bind(this));select.addEventListener("click",function(e){e.stopPropagation();this.selectsActions(e)}.bind(this));select.addEventListener("keydown",function(e){this.selectsActions(e)}.bind(this));select.addEventListener("focusin",function(e){this.selectsActions(e)}.bind(this));select.addEventListener("focusout",function(e){this.selectsActions(e)}.bind(this));if(this.selectOptions.search){let selectInput=select.querySelector(`.${this.selectClasses.classSelectInput}`);let selectOptions=select.querySelectorAll(`.${this.selectClasses.classSelectOption}`);selectInput.addEventListener("input",function(e){this.searchActions(hiddenSelect,select,selectInput,selectOptions)}.bind(this))}}
selectsActions(e){const targetElement=e.target;const targetType=e.type;const select=targetElement.closest(`.${this.selectClasses.classSelectCustom}`);const hiddenSelect=targetElement.closest(`.${this.selectClasses.classSelect}`).querySelector("select");if(targetType==="click"&&!hiddenSelect.disabled){if(targetElement.closest(`.${this.selectClasses.classSelectTitle}`)&&!targetElement.closest(`.${this.selectClasses.classSelectCloseButton}`)){this.selectOptions.search?this.searchAction(hiddenSelect,select,targetElement):null;this.selectAction(hiddenSelect,select)}else if(targetElement.closest(`.${this.selectClasses.classSelectCloseButton}`)){this.closeTagAction(hiddenSelect,select,targetElement)}else if(targetElement.closest(`.${this.selectClasses.classSelectOption}`)){const option=targetElement.closest(`.${this.selectClasses.classSelectOption}`);this.optionAction(hiddenSelect,select,option);this.setPositionSelectBody(select);this.selectOptions.hideSelectLabel?select.querySelector(`.${this.selectClasses.classSelectLabel}`).style.display="none":null}}else if(targetType==="focusin"||targetType==="focusout"){if(targetElement.closest(`.${this.selectClasses.classSelect}`)){targetType==="focusin"?select.parentElement.classList.add(this.selectClasses.classSelectFocus):select.parentElement.classList.remove(this.selectClasses.classSelectFocus);(targetType==="focusout"&&this.selectOptions.search)?this.searchAction(hiddenSelect,select,targetElement,!0):null}}else if(targetType==="keydown"&&e.code==="Escape"){this.selectAction(hiddenSelect,select)}}
selectAction(hiddenSelect,select,clickOnSelect=!0){if(clickOnSelect){const selectBody=select.querySelector(`.${this.selectClasses.classSelectBody}`);if(!selectBody.classList.contains("_slide")){select.parentElement.classList.toggle(this.selectClasses.classSelectOpen);_slideToggle(selectBody,this.selectOptions.speed)}}else{const selectsActive=document.querySelectorAll(`.${this.selectClasses.classSelect}.${this.selectClasses.classSelectOpen}`);if(selectsActive.length){this.closeAllOpenSelect(select,selectsActive)}}
if(hiddenSelect.closest("[data-one-select]")){const selectsGroup=hiddenSelect.closest("[data-one-select]");const selectsActive=selectsGroup.querySelectorAll(`.${this.selectClasses.classSelect}.${this.selectClasses.classSelectOpen}`);if(selectsActive.length){this.closeAllOpenSelect(select,selectsActive)}}}
closeAllOpenSelect(select,selectsActive){selectsActive.forEach(select=>{let selectOptions=select.querySelector(`.${this.selectClasses.classSelectBody}`);if(!selectOptions.classList.contains("_slide")){select.classList.remove(this.selectClasses.classSelectOpen);_slideUp(selectOptions,this.selectOptions.speed)}})}
closeTagAction(hiddenSelect,select,targetElement,clickOnButton=!0){let targetTag;let targetTagValue;if(clickOnButton){targetTag=targetElement.closest(`.${this.selectClasses.classSelectTag}`);targetTagValue=targetTag.textContent.trim();targetTag.remove()}else{targetTagValue=targetElement.textContent.trim();targetElement.remove()}
this.setPositionSelectBody(select);this.changeSelectedItems(hiddenSelect,select,null,!1,targetTagValue)}
optionAction(hiddenSelect,select,option){if(this.selectOptions.multiple){if(option.hasAttribute("data-checkbox")){const optionCheckbox=option.querySelector(".checkbox");if(option.dataset.value==="all"){const hiddenSelectOptions=hiddenSelect.querySelectorAll("option:not([data-value='all'])");let selectOptions=select.querySelectorAll(`.${this.selectClasses.classSelectOption}:not([data-value='all'])`);const selectOptionsCheckboxes=select.querySelectorAll(".checkbox");if(optionCheckbox.classList.contains("_active")){hiddenSelectOptions.forEach(option=>{option.removeAttribute("selected")});selectOptions.forEach(option=>{option.classList.remove("selected")});selectOptionsCheckboxes.forEach(checkbox=>{checkbox.classList.remove("_active")})}else{hiddenSelectOptions.forEach(option=>{option.setAttribute("selected","")});selectOptions.forEach(option=>{option.classList.add("selected")});selectOptionsCheckboxes.forEach(checkbox=>{checkbox.classList.add("_active")})}}else{optionCheckbox.classList.toggle("_active")}}
this.changeSelectedItems(hiddenSelect,select,option);if(this.selectOptions.quantity){const quantity=select.querySelectorAll(`.${this.selectClasses.classSelectOptionSelected}:not([data-value='all']`).length;this.selectOptions.quantityOutput==="title"?this.getSelectTitleValue(hiddenSelect,select,quantity):null;this.selectOptions.quantityOutput==="body"?select.querySelector(`.${this.selectClasses.classSelectQuantity}`).innerHTML=`(${quantity}) :`:null;hiddenSelect.hasAttribute("data-quantity")?this.selectContentOutput(hiddenSelect,select):null}else{this.getSelectTitleValue(hiddenSelect,select)}}else{if(this.selectOptions.search){this.searchAction(hiddenSelect,select,option);this.changeSelectedItems(hiddenSelect,select,option)}else{if(select.querySelector(`.${this.selectClasses.classSelectOption}[hidden]`)){select.querySelector(`.${this.selectClasses.classSelectOption}[hidden]`).hidden=!1}
option.hidden=!0;this.changeSelectedItems(hiddenSelect,select,option);this.getSelectTitleValue(hiddenSelect,select)}
this.selectAction(hiddenSelect,select)}
this.setSelectChange(hiddenSelect)}
changeSelectedItems(hiddenSelect,select,option,clickOption=!0,targetTagValue){if(clickOption){if(this.selectOptions.multiple){option.classList.toggle(this.selectClasses.classSelectOptionSelected);hiddenSelect.querySelector(`option[value="${option.dataset.value}"]`).hasAttribute("selected")?hiddenSelect.querySelector(`option[value="${option.dataset.value}"]`).removeAttribute("selected"):hiddenSelect.querySelector(`option[value="${option.dataset.value}"]`).setAttribute("selected","")}else{hiddenSelect.querySelector("[selected]").removeAttribute("selected");hiddenSelect.querySelector(`option[value="${option.dataset.value}"]`).setAttribute("selected","");select.querySelector(`.${this.selectClasses.classSelectOptionSelected}`).classList.remove("selected");option.classList.add("selected");hiddenSelect.value=option.hasAttribute("data-value")?option.dataset.value:option.textContent}}else{const hiddenSelectSelectedItems=this.getSelectedOptionsData(hiddenSelect);const selectSelectedItems=select.querySelectorAll(`.${this.selectClasses.classSelectOptionSelected}`);hiddenSelectSelectedItems.forEach(hiddenSelectSelectedItem=>{hiddenSelectSelectedItem.textContent===targetTagValue?hiddenSelectSelectedItem.removeAttribute("selected"):null});selectSelectedItems.forEach(selectSelectedItem=>{selectSelectedItem.textContent===targetTagValue?selectSelectedItem.classList.remove("selected"):null})}}
setPositionSelectBody(select){const selectTitleHeight=select.querySelector(`.${this.selectClasses.classSelectTitle}`).offsetHeight;select.querySelector(`.${this.selectClasses.classSelectBody}`).style.top=(selectTitleHeight-8)+"px"}
selectDisabled(hiddenSelect,select){if(this.selectOptions.disabled){select.classList.add(this.selectClasses.classSelectDisabled);select.querySelector(`.${this.selectClasses.classSelectTitle}`).setAttribute("disabled","")}else{select.classList.remove(this.selectClasses.classSelectDisabled);select.querySelector(`.${this.selectClasses.classSelectTitle}`).removeAttribute("disabled")}}
searchActions(hiddenSelect,select,selectInput,selectOptions){select.querySelector(`.${this.selectClasses.classSelectBody}`).hidden===!0?this.selectAction(hiddenSelect,select):null;selectOptions.forEach(option=>{if(option.textContent.toUpperCase().indexOf(selectInput.value.toUpperCase())>=0){option.hidden=!1}else{option.hidden=!0}});this.setSelectChange(hiddenSelect)}
searchAction(hiddenSelect,select,targetElement,focusout=!1){let selectInput=select.querySelector(`.${this.selectClasses.classSelectInput}`);let selectOptions=select.querySelectorAll(`.${this.selectClasses.classSelectOption}`);if(targetElement.tagName==="INPUT"){if(selectInput.value===""){selectOptions.forEach(option=>{option.removeAttribute("hidden")})};if(focusout){}}else if(targetElement.tagName==="BUTTON"){selectInput.value="";selectInput.setAttribute("placeholder",`${targetElement.dataset.value}`);selectInput.dataset.placeholder=`${targetElement.dataset.value}`}}
setSelectChange(hiddenSelect){if(this.selectOptions.validate){formValidate.validateInput(hiddenSelect)}
if(this.selectOptions.submit&&hiddenSelect.value){let tempButton=document.createElement("button");tempButton.type="submit";hiddenSelect.closest("form").append(tempButton);tempButton.click();tempButton.remove()}
const selectBlock=hiddenSelect.parentElement;this.selectCallback(hiddenSelect,selectBlock)}
selectCallback(hiddenSelect,selectBlock){document.dispatchEvent(new CustomEvent("selectCallback",{detail:{select:hiddenSelect}}))}
setLogging(message){this.selectOptions.logging?console.log(`[select]: ${message}`):null}}
let _slideUp=(target,duration=500,showmore=0)=>{if (!target.classList.contains("_slide")){target.classList.add("_slide");target.style.transitionProperty="height, margin, padding";target.style.transitionDuration=duration+"ms";target.style.height=`${target.offsetHeight}px`;target.offsetHeight;target.style.overflow="hidden";target.style.height=showmore ? `${showmore}px` :`0px`;target.style.paddingTop=0;target.style.paddingBottom=0;target.style.marginTop=0;target.style.marginBottom=0;window.setTimeout(()=>{target.hidden=!showmore ? true :false;!showmore ? target.style.removeProperty("height") :null;target.style.removeProperty("padding-top");target.style.removeProperty("padding-bottom");target.style.removeProperty("margin-top");target.style.removeProperty("margin-bottom");!showmore ? target.style.removeProperty("overflow") :null;target.style.removeProperty("transition-duration");target.style.removeProperty("transition-property");target.classList.remove("_slide");document.dispatchEvent(new CustomEvent("slideUpDone",{detail:{target:target}}))},duration)}};let _slideDown=(target,duration=500,showmore=0)=>{if (!target.classList.contains("_slide")){target.classList.add("_slide");target.hidden=target.hidden ? false :null;showmore ? target.style.removeProperty("height") :null;let height=target.offsetHeight;target.style.overflow="hidden";target.style.height=showmore ? `${showmore}px` :`0px`;target.style.paddingTop=0;target.style.paddingBottom=0;target.style.marginTop=0;target.style.marginBottom=0;target.offsetHeight;target.style.transitionProperty="height, margin, padding";target.style.transitionDuration=duration+"ms";target.style.height=height+"px";target.style.removeProperty("padding-top");target.style.removeProperty("padding-bottom");target.style.removeProperty("margin-top");target.style.removeProperty("margin-bottom");window.setTimeout(()=>{target.style.removeProperty("height");target.style.removeProperty("overflow");target.style.removeProperty("transition-duration");target.style.removeProperty("transition-property");target.classList.remove("_slide");document.dispatchEvent(new CustomEvent("slideDownDone",{detail:{target:target}}))},duration)}};let _slideToggle=(target,duration=500)=>{if (target.hidden){return _slideDown(target,duration)}else{return _slideUp(target,duration)}}
let formValidate={validateInput(formRequiredItem){let error=0;if(formRequiredItem.type==="checkbox"&&!formRequiredItem.checked){this.addError(formRequiredItem);error++}else{if(!formRequiredItem.value){this.addError(formRequiredItem);error++}else{this.removeError(formRequiredItem)}}
return error},addError(formRequiredItem){formRequiredItem.classList.add("_error");formRequiredItem.parentElement.classList.add("_error")},removeError(formRequiredItem){formRequiredItem.classList.remove("_error");formRequiredItem.parentElement.classList.remove("_error")},}